/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            hold-trigger-key-positions = <13 12 11 10 16 17 18 19>;
        };

        layer_tap: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
        };

        num_3_period: num_3_period {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_3_PERIOD";
            bindings = <&kp NUMBER_3>, <&kp PERIOD>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        num_2_comma: num_2_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_2_COMMA";
            bindings = <&kp NUMBER_2>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q            &kp W                   &kp F             &kp P              &kp B    &kp J  &kp L              &kp U         &kp Y            &kp KP_EQUAL
&hrm LEFT_WIN A  &hrm LEFT_ALT R         &hrm LCTRL S      &hrm LEFT_SHIFT T  &kp G    &kp M  &hrm LEFT_SHIFT N  &hrm LCTRL E  &hrm LEFT_ALT I  &hrm LEFT_WIN O
&kp Z            &kp X                   &kp C             &kp D              &kp V    &kp K  &kp H              &comma_semi   &dot_colon       &kp SLASH
&none            &layer_tap 3 BACKSPACE  &layer_tap 1 TAB                                                        &kp ENTER     &kp SPACE        &super_bspc
            >;
        };

        num_layer {
            bindings = <
&none         &none         &kp ENTER  &kp BACKSPACE   &none    &kp MINUS   &kp N7  &kp N8        &kp N9         &kp EQUAL
&kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &none    &kp PLUS    &kp N4  &kp N5        &kp N6         &kp ASTERISK
&amps_morph   &none         &none      &none           &none    &kp DELETE  &kp N1  &num_2_comma  &num_3_period  &kp SLASH
&trans        &trans        &trans                                                  &kp ENTER     &kp SPACE      &kp NUMBER_0
            >;
        };

        nav_layer {
            bindings = <
&trans        &trans         &kp ENTER        &trans          &trans     &trans      &kp HOME    &kp UP_ARROW  &kp END      &super_bspc
&kp LEFT_WIN  &kp LEFT_ALT   &kp LCTRL        &kp LEFT_SHIFT  &kp TAB    &none       &kp LEFT    &kp DOWN      &kp RIGHT    &kp PAGE_UP
&trans        &none          &kp LC(LS(TAB))  &kp LC(TAB)     &trans     &kp DELETE  &kp K_COPY  &kp K_CUT     &kp K_PASTE  &kp PAGE_DOWN
&trans        &kp BACKSPACE  &kp TAB                                                             &trans        &trans       &trans
            >;
        };

        fun_layer {
            bindings = <
&tog 0        &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG    &trans  &kp F7  &kp F8  &kp F9  &kp F12
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_CLR    &kp C_PREV    &kp C_PP      &kp C_NEXT    &trans          &trans  &kp F1  &kp F2  &kp F3  &kp F10
&trans        &trans        &trans                                                      &trans  &trans  &trans
            >;
        };
    };
};
